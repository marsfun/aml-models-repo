@Library('alauda-cicd') _
def IMAGE
def RELEASE_BUILD
def DOCKER_CONTEXT

pipeline {
    
    agent any
    environment {
        DOCKER_CONTEXT = 'docker'
    }
    stages {
        stage('Checkout') {
            
            steps {
                echo 'Checkout'
                checkout([$class: 'GitSCM', branches: [[name: '*/master']], browser: [$class: 'GithubWeb', repoUrl: 'https://github.com/marsfun/aml-models-repo'], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[url: 'https://github.com/marsfun/aml-models-repo']]])
                
            }
           
            
        }    
        stage('busi') {
            steps{
                script{
                    echo 'busi'
                    def getparam = { String param ->
                        def matcher = readFile('deploy/meta.xml') =~ "<$param>(.+)</$param>"
                        matcher?matcher[0][1]:null
                    }

                    def ns = getparam('namespace')
                    if (ns){
                        echo "namespace ${ns}"
                        sh """
                        sed -i 's/@namespace@/$ns/g' deploy/modelserver.yaml
                        cat deploy/modelserver.yaml
                        """
                    }
                    def model = getparam('modelname')
                    if (model){
                        echo "modelname ${model}"
                        sh """
                        sed -i 's/@modelname@/$model/g' deploy/modelserver.yaml
                        cat deploy/modelserver.yaml
                        """
                    }
                    
                    
                }
            }
        }
        stage('Build') {
            steps {
                script {
                    echo 'Building'
                    def model = getparam('modelname')
                    IMAGE = deploy.dockerBuild(
                            "docker/Dockerfile", //Dockerfile
                            "docker", // build context
                            "index.alauda.cn/alaudak8s/chicago-taxi-modelserver", // repo address
                            "latest", // tag
                            "daniel-alaudak8s", // credentials for pushing
                        ).setArg("MODEL", model)
                    IMAGE.start().push()
                }
            }
        }
        stage('Deploy') {
            steps {
                script {
                    echo 'Deploying'
                    deploy.setupProd()
                    try {
                        sh "kubectl apply -f deploy/modelserver.yaml"
                    } 
                    catch (Exception exc) {
                        echo "error: ${exc}"
                        throw exc
                    }
                }
            }
        }
    }
}
